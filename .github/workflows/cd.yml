# ===================== EJEMPLO DE PIPELINE DE CD - NO CONSUME AWS =====================
# Este workflow está configurado solo como ejemplo/documentación.
# Todos los pasos que consumen recursos reales de AWS están deshabilitados o comentados.
# Puedes activarlos solo si realmente quieres hacer deploy en AWS.

name: CD - Continuous Deployment (Example Only)

on:
  workflow_dispatch:

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: "1.5.0"
    # - name: Configure AWS credentials
    #   uses: aws-actions/configure-aws-credentials@v4
    #   with:
    #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     aws-region: us-east-1
    - name: Terraform Init
      run: terraform init
    - name: Terraform Plan (safe, no apply)
      run: terraform plan -no-color
    # - name: Terraform Apply (disabled)
    #   run: terraform apply -auto-approve

  # deploy-backend:
  #   runs-on: ubuntu-latest
  #   needs: deploy-infrastructure
  #   if: github.ref == 'refs/heads/main'
  #   defaults:
  #     run:
  #       working-directory: ./backend
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #   - name: Configure AWS credentials
  #     uses: aws-actions/configure-aws-credentials@v4
  #     with:
  #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       aws-region: us-east-1
  #   - name: Login to Amazon ECR
  #     id: login-ecr
  #     uses: aws-actions/amazon-ecr-login@v2
  #   - name: Build, tag, and push image to Amazon ECR
  #     id: build-image
  #     env:
  #       ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #       ECR_REPOSITORY: financial-sentiment-backend
  #       IMAGE_TAG: ${{ github.sha }}
  #     run: |
  #       docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
  #       docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
  #       docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  #       docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
  #       echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
  #   - name: Deploy to App Runner (disabled)
  #     run: echo "Deploy step disabled in example pipeline."

  # deploy-frontend:
  #   runs-on: ubuntu-latest
  #   needs: deploy-backend
  #   if: github.ref == 'refs/heads/main'
  #   defaults:
  #     run:
  #       working-directory: ./frontend
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #   - name: Setup Node.js
  #     uses: actions/setup-node@v4
  #     with:
  #       node-version: '18'
  #       cache: 'npm'
  #   - name: Install dependencies
  #     run: npm ci
  #   - name: Build project
  #     run: npm run build
  #     env:
  #       VITE_API_URL: ${{ secrets.VITE_API_URL }}
  #   - name: Deploy to Vercel (disabled)
  #     run: echo "Deploy step disabled in example pipeline."

  # Deploy DBT Models
  deploy-dbt:
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    if: github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: ./dbt

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dbt
      run: |
        pip install dbt-postgres
        pip install dbt-core

    - name: Run dbt
      run: |
        dbt deps
        dbt run
        dbt test
      env:
        DBT_PROFILES_DIR: .
        DATABASE_URL: ${{ secrets.DATABASE_URL }}

  # Notify Deployment Status
  notify-deployment:
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend, deploy-dbt]
    if: always() && github.ref == 'refs/heads/main'

    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: always()

    - name: Create Deployment Summary
      uses: actions/github-script@v7
      with:
        script: |
          const { data: deployments } = await github.rest.repos.listDeployments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            per_page: 1
          });
          
          if (deployments.length > 0) {
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployments[0].id,
              state: '${{ needs.deploy-backend.result }}' === 'success' && '${{ needs.deploy-frontend.result }}' === 'success' ? 'success' : 'failure',
              environment_url: '${{ secrets.FRONTEND_URL }}',
              description: 'Deployment completed'
            });
          } 