#!/usr/bin/env python3
"""
Script principal para ejecutar las correcciones de prioridad alta del proyecto.
"""

import subprocess
import sys
import os
import time

def run_command(command, description):
    """Ejecutar un comando y mostrar el resultado."""
    print(f"\nüîß {description}")
    print(f"Comando: {command}")
    print("-" * 50)
    
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        print(f"Salida: {result.stdout}")
        if result.stderr:
            print(f"Errores: {result.stderr}")
        print(f"C√≥digo de salida: {result.returncode}")
        return result.returncode == 0
    except Exception as e:
        print(f"Error ejecutando comando: {e}")
        return False

def main():
    """Ejecutar las correcciones de prioridad alta."""
    print("üöÄ INICIANDO CORRECCIONES DE PRIORIDAD ALTA")
    print("=" * 60)
    
    # 1. Verificar que Docker est√© corriendo
    print("\n1Ô∏è‚É£ Verificando servicios Docker...")
    if not run_command("docker ps", "Verificando contenedores activos"):
        print("‚ùå Error: Docker no est√° corriendo o hay problemas")
        return
    
    # 2. Reiniciar servicios con nueva configuraci√≥n
    print("\n2Ô∏è‚É£ Reiniciando servicios con nueva configuraci√≥n...")
    if not run_command("docker-compose -f docker-compose-simple.yaml down", "Deteniendo servicios"):
        print("‚ö†Ô∏è Advertencia: Error al detener servicios")
    
    if not run_command("docker-compose -f docker-compose-simple.yaml up -d", "Iniciando servicios"):
        print("‚ùå Error: No se pudieron iniciar los servicios")
        return
    
    # 3. Esperar a que PostgreSQL est√© listo
    print("\n3Ô∏è‚É£ Esperando a que PostgreSQL est√© listo...")
    time.sleep(10)
    
    # 4. Probar conexi√≥n desde backend
    print("\n4Ô∏è‚É£ Probando conexi√≥n a PostgreSQL...")
    if not run_command("docker exec proyectopuertagrande-backend-1 python /app/test_db_connection.py", "Probando conexi√≥n desde backend"):
        print("‚ùå Error: No se pudo conectar a PostgreSQL")
        return
    
    # 5. Poblar base de datos con datos reales
    print("\n5Ô∏è‚É£ Poblando base de datos con datos reales...")
    if not run_command("docker exec proyectopuertagrande-backend-1 python /app/populate_real_data.py", "Poblando datos reales"):
        print("‚ùå Error: No se pudieron poblar los datos")
        return
    
    # 6. Verificar datos insertados
    print("\n6Ô∏è‚É£ Verificando datos insertados...")
    if not run_command("docker exec proyectopuertagrande-backend-1 python /app/test_db_connection.py", "Verificando datos finales"):
        print("‚ö†Ô∏è Advertencia: Error al verificar datos")
    
    print("\nüéâ CORRECCIONES COMPLETADAS!")
    print("=" * 60)
    print("‚úÖ PostgreSQL configurado correctamente")
    print("‚úÖ Base de datos poblada con datos reales")
    print("‚úÖ Dashboard listo para usar")
    print("\nüåê Para acceder al dashboard:")
    print("   Frontend: http://localhost:3000")
    print("   Backend API: http://localhost:8000")

if __name__ == "__main__":
    main() 